# from Crypto.Util.number import isPrime
from random import randint
from Crypto.Util.number import *
from Crypto.Cipher import AES
from hashlib import sha256
# import sys   
# sys.setrecursionlimit(100000)
# # # for i in range(1024 , 2048):
# # #     if(isPrime(2 ** i - 1) == True):
# # #         print(2 ** i - 1)
# # #         print(i)

# # prime = 10407932194664399081925240327364085538615262247266704805319112350403608059673360298012239441732324184842421613954281007791383566248323464908139906605677320762924129509389220345773183349661583550472959420547689811211693677147548478866962501384438260291732348885311160828538416585028255604666224831890918801847068222203140521026698435488732958028878050869736186900714720710555703168729087
# # i = 1279
# # for j in range(1 , 1279):
# #     if(pow(2 , j , prime) == 1):
# #         print(j)
# # print(pow(2 , 1279 , prime))
# ups = 2 ** 2048
# downs = 2 ** 1024
from Crypto.Util.number import sieve_base
# def dfs(steps = 1 , prime = 1):
#     if prime > ups and isPrime(prime + 1):
#         print(prime)
#         exit(0)
#     else:
#         dfs(steps + 1 , prime * sieve_base[steps])
#         dfs(steps + 1 , prime)

# dfs(1 , 1)
# s = 1
# # print(len(sieve_base))
# for i in range(len(sieve_base)//50):
#     s = s * sieve_base[i]

# print(len(bin(s)) - 2)
# print(s)
# print(s < 2 ** 2048 and s > 2 ** 1024)
# print(isPrime(s + 1))
s = 494697569060000899157342200834877659386841369758202142576728628981294561344721092580657063284960382680477661460593011681011056888931695377394490974678507144040915517350125441953292843781256819277265406992037549145743575487419768351379847824837464873244814341060252766153399288279615942405758681859575741468496401774803402967536755490895918348280950291497110788567815997695727925468308028191503201770805973301638629875650244034607953336692624777810974333644320694314373273949039914503596369029428054392708203880710

# for i in range(len(sieve_base)//50):
#     news = s // sieve_base[i] 
#     if isPrime(news + 1) == True and (news < 2 ** 2048 and news > 2 ** 1024):
        # print(news+1)
k = 26875323816323571573615101148698174342985319401169612178128890325249157959556847015666245095584646826994940403682694374743084418379376232991817595442341393955680749565840110659638536884540746474138350534236884692719345773725876323612244360921211645777383512979453835536550952310367962022367008870981550400691703998075596081093228343038444776657526764480509511841501798740858591014286345140765288484878530241585706070308173647792404298514676269783649313825673757001016498493531964492775700940584596762301821746

p = 801778880162076011600230471369331700789045980159160684889349479710363956798575514717434462374328010827354394587671007586727806951266929298856549391699363280455292572690640910783294722497985120384546850878504941889373704193549057295591325485960234802665825512253245974316692525574742208113061072705957441602101137398384769801518242286703271228980470488650098522800350077302638452947014632401139711135828157701197131078849666182508838471138775977003199892454328515906601740598119796602263158880758597070839876631

b = 310498065290149973226339071146140669316966798918754209683730775607928332941507898589790161694348795187124470206276412548187226591367239663905493338253427352329822579334715020016907723556551094759590398134750825821282516250270055841051732452771629081080321769125893053039978853328129395402335782400423323073901915412148170607586090332818556000825180402147158371255841424354444469426744262189151078125646227503804532292291870579731307053581217201395852849792865369748297344222074703516011085769834709288778092141

dio = 289856663254052919726614873602662410090135888446201700616020450401695494764809334644896697553952407339185932122091024161748885284808762753690443126613906980724022150828142040944795564477634852119364057325522381177363772914675298961042214270962528494185335857799966570380732751357288708063169308826330696693006126703077324420836975083949378593349091429474456338497792492867683282713253483340663221330027856205803100295884906834019748511065222221932082291130793136566806870493075323683318816991396577259602551160

key = pow(dio,b,p)
key = sha256(str(key).encode()).digest()
print(key)
ciphertext = long_to_bytes(0xba15a9b3ff088340b5fb1bb8dd1677622bc0d8fd0479ac1028032c320a6017ce7c35d7ca17f15d0e0ba1)

iv = b'uiuctf2021uiuctf'
cipher = AES.new(key, AES.MODE_CFB, iv)

print(cipher.decrypt(ciphertext))