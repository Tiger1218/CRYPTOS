from Crypto.Hash import SHA
from Crypto.Util.number import inverse , bytes_to_long
message = b"w31c0me_t0_x1dian_univers1ty_0erferwj3"
h = bytes_to_long(SHA.new(message).digest())
downrange = 47 * 3600 * 24 * 365
uprange = 49 * 3600 * 24 * 365

r , s = (777774087163559936871349548220096365795950474835, 396751391897398451508211554528732772960412307220)
p , q , g = (89884656743115795866503745952001494713829492138605404564366289787970868626241720257461767602293363120234722624303357905693056854937670914403440916376973891210048057014285798627642314805339377377059395297739236335962745365733529818838518640259884189747304791723374082761447522881732872633187311348958515455781 , 779239876743149096344265487066230228818642773793 , 6375837113168439702411266780647793420132866920027292650450383316552428479466144854311966655374640315117028377452637782594616062547529162981300276053073249021501367210791795228007161301660380919239899306772359545379684601981039219956239077972003550720207336637435619696588007119589624132474637583110277868255)
for k in range(497000000000 , 497100000000):
    if (k - downrange) % 10000 == 0:
        print(k - downrange)
    if r == pow(g , k , p) % q:
        x = inverse(r , q) * (k * s - h) % q
        print(k , x)
